const { expect } = require("chai");
const { ethers } = require("hardhat");
const shared = require("./shared");
const rlp = require('rlp');
const Big = require('big.js');
const sha3 = require('js-sha3');
const fs = require('fs');
const bls = require("bls-eth-wasm");

async function genBLSKey() {
    await bls.init(bls.BLS12_381);
    blsKey = new bls.SecretKey();
    await blsKey.setByCSPRNG();
    return blsKey;
}

async function uint2num(x) {
    return Buffer.from(x).toString('hex');
}

async function delay(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

async function getSampleEvidence() {
    return  [
          "0x6E654b122377EA7f592bf3FD5bcdE9e8c1B1cEb9", //operator
          "0xabce508955d1aedc65109b5d11a197fde880dd771b613b28a045c6bf72f2c969", //blockhash
          "0xabce508955d1aedc65109b5d11a197fde880dd771b613b28a045c6bf72f2c969", //correctblockhash
          "0x0000000000000000000000000000000000000000000000000000000000000001", //currentCommitteeRoot
          "0x0000000000000000000000000000000000000000000000000000000000000001", //correctCurrentCommitteeRoot
          "0x0000000000000000000000000000000000000000000000000000000000000002", //nextCommitteeRoot
          "0x0000000000000000000000000000000000000000000000000000000000000002", //correctNextCommitteeRoot
          '0x'+BigInt('0x01c8f418').toString(16), //blockNumber
          '0x'+BigInt('0x0').toString(16), //epochBlockNumber
          "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", //blockSignature
          "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", //commitSignature
          "0x1A4", //chainID
          "0xf90224a03e35bf1913bae12f31df48d9bd5450c9adf0fcd0686bb7bb68f5dfbb6823e398a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0af635f011e499ad2366378afaabbe75459dd3a3d9bf92658e7c15e9ad92ef543a02acba3ec11a59c368c8cbd9667239af674848f4dd129f9b93fca0131b1cbf190a07b687f4eff7095882b12a863619b74adfd84a40bf8d2e5512f5e078189b7c930bc8f41887040000000000008306d4568464abbf39a093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100", //rawBlockHeader
        ];
}

describe("LagrangeService",
 function () {
    let admin, proxy, lagrangeService, lc, lsm, lsaddr, l2ooAddr, outboxAddr;

    before(async function () {
        [admin] = await ethers.getSigners();
    });

    beforeEach(async function () {
        const overrides = {
            gasLimit: 5000000,
        };

	const Common = await ethers.getContractFactory("Common");
	const common = await Common.deploy();
	await common.deployed();
          
        console.log("Deploying Slasher mock...");

        const SlasherFactory = await ethers.getContractFactory("Slasher");
        const slasher = await SlasherFactory.deploy(overrides);
        await slasher.deployed();

        console.log("Deploying Lagrange Service Manager...");
        
        const LSMFactory = await ethers.getContractFactory("LagrangeServiceManager");
        const lsm = await LSMFactory.deploy(slasher.address, overrides);
        await lsm.deployed();
        
        console.log("Loading Lagrange Committee shared state...");
        
        lc = shared.LagrangeCommittee;

        console.log("Deploying DelegationManager mock...");

        const DMFactory = await ethers.getContractFactory("DelegationManager");
        const dm = await DMFactory.deploy(overrides);
        await dm.deployed();

        console.log("Deploying StrategyManager mock...");

        const SMFactory = await ethers.getContractFactory("StrategyManager");
        const sm = await SMFactory.deploy(dm.address, overrides);
        await sm.deployed();

        console.log("Deploying Lagrange Service...");

        const LSFactory = await ethers.getContractFactory("LagrangeService",{});
        const lagrangeService = await LSFactory.deploy(lsm.address, lc.address, sm.address, overrides);
        await lagrangeService.deployed();
        lsaddr = lagrangeService.address;
        
        const outboxFactory = await ethers.getContractFactory("Outbox");
        const outbox = await outboxFactory.deploy();
        await outbox.deployed();

        const l2ooFactory = await ethers.getContractFactory("L2OutputOracle");
        const l2oo = await l2ooFactory.deploy(
            1,//_submissionInterval
            1,//_l2BlockTime
            11991388-1,//_startingBlockNumber
            1,//_startingTimestamp
            "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",//_proposer
            "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",//_challenger
            5//_finalizationPeriodSeconds
        );
        await l2oo.deployed();
        l2ooAddr = l2oo.address;
        
        const ovFactory = await ethers.getContractFactory("OptimismVerifier");
        const opt = await ovFactory.deploy(l2oo.address);
        
        const avFactory = await ethers.getContractFactory("ArbitrumVerifier");
        const arb = await avFactory.deploy(outbox.address);
        
        console.log("L2OutputOracle:",l2oo.address);
        console.log("Outbox:",outbox.address);
        
        await lagrangeService.setOptAddr(opt.address);
        await lagrangeService.setArbAddr(arb.address);

        console.log("OptimismVerifier:",opt.address);
        console.log("ArbitrumVerifier:",arb.address);
    });
        
/*
    it('Verify raw blockheader sequence', async function() {
      const lagrangeService = await ethers.getContractAt("LagrangeService", lsaddr, admin)
      seq = ["0xf90224a03e35bf1913bae12f31df48d9bd5450c9adf0fcd0686bb7bb68f5dfbb6823e398a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0af635f011e499ad2366378afaabbe75459dd3a3d9bf92658e7c15e9ad92ef543a02acba3ec11a59c368c8cbd9667239af674848f4dd129f9b93fca0131b1cbf190a07b687f4eff7095882b12a863619b74adfd84a40bf8d2e5512f5e078189b7c930b9010000000000000000000000000000000000000000020000000000000000000000000000000000000000800000000000000000200000000000000000000000200000004000000000000400000008000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000010000000010000000000000000800000000000002000000000000000100000000000000000020000001000000000000000000000000000000000000000000000002000000000000002000000100000000000000000000000010200000000000000000000000010000000000000000000000000000000000000000000000000000000000000018401c8f41887040000000000008306d4568464abbf39a093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a0abce508955d1aedc65109b5d11a197fde880dd771b613b28a045c6bf72f2c969a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0878fb12f4344bcc0290a6b894c27bd5958e465eec14d7728978823a82f0466dda0efc74fed28b5c8fea74dc7f742b05bbc6bc0cc04b31e77a4fed62abc826deac1a03d44ef31f002c7d3adeec6b0125e5683238dac8bff0de47141dcad9e5b16dd18bc8f419870400000000000083052d5e8464abbf39a093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a0b9120657b925edb7314396ac5ff8379598016ce2adabf3c34c151e76241d1f9aa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0fa52c068e55c2837a02df56fe7f0135a28f96884f2b0253fd12b1bb8cbe19203a0eb5eb3dbd0d2dd42607fefa5655f4e30f7afcfc5d751dc09c1733a998726eef5a022ba3d0a0c2bda66089b2f528c48b5fe514a43b917772f34519fac75d810acb7bc8f41a8704000000000000830536088464abbf39a093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a03ff4aaf469c25fc20d3b18b351aa2df853ee756d66a330e8c6fbddb4fd0e42e5a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a041b6f29514d0190a70c4b32247faa785b6356954c29ecbb8b6d9ff10180ec8f1a0798342e0657a4c196594dee6799481b6a988df8044d5f99aedc8a76b3ca23634a06ee56cef6b82d77471c65233124269bdabbe6a321cb683d7d4c1bbd8fa86e219bc8f41b8704000000000000830cf2ff8464abbf3aa093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a0136c67df07f7e3672e27f40d51de1df9fe81c3f68bdb645b0791b199adcaab5aa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0ad546679ec2933b5330bc19eeb3b7ed81e19c9316c16af8b46e675d5a573ccf8a05e313724d7eeaa61d62878ba34e731807b445d44a0878af67e9054de8b7e6c2fa0d6b862452b7abf2ec1e16e55595d97220eb8efcf309ab5d8a3d669646cb9d3d4b90100002000000000082000000000800000000000400002000800000000020000101000000000200000000000000000080000000000000000000000000000002c0000004000000001000000000008000000200000000002048000000000000000000800040000020000002400008000000800000000000000400020000010000211000000000400000002800000000000000000010240280180080100006000000000820000004000220010000000000000000000480080000000000000000000000100041202001008000000828000000100000000800100021000800000004060001010000400000000000000000000000000000020000000000020000000002002018401c8f41c8704000000000000831491588464abbf3ba093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a0005b9729844b9e36b1dae25dd2f046f7c17f9b19e732bcd06fa4847570ff9373a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0afee93b3334ac89e1ae12557ce4357428350dbf8a9217de24f8fc7f9ffb1fd0ea0392eabbe0f748b2d05da6142508c0ca22dbbfd3ccc00364d59d9d5d30d38b5b3a0633e4cea618a50f336a2659496028734afd3e7a34247944a4550c10e37a2bb4dbc8f41d8704000000000000830697928464abbf3ba093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a0529303e39979448c54f7705cb884750157abfa646c4da129e0e8f14667cd9787a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0343b5abce77bafa4820c1ca31fc1aa18b1a08903e0f1aa9dde520c62a3684fc2a089e303bbfd60bca3f20ce5725bc366a4f032af2b4cb7d0bb28baa6c779e271daa0f910304f4b01ac9c2425d64e29fa4b725b55e8b729e37ab748855425a63b83f0bc8f41e8704000000000000830367568464abbf3ca093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a0859b7edc599fcf3796f1df1d44e7b237b11a1394def3bade279b0e825bc74e89a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0dd5cb5a840d22e0b0681606b049966f3cdcf42e20a1824ac168f4ed7d4da6760a016b7ab7c7b7d94ec62f45bac62316b52575e4a6b7f38065592123277a1428b0aa0d0977f53c279205ad08364140231f6d32798f3a3bbba8a8e6b5352cb5ed4fc82bc8f41f8704000000000000830cd2978464abbf3ca093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100",
"0xf90224a0d5bf6218a579c3a0211053ef0748a2dba8f2b67f6d2704d066f29c0b02819246a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794a4b000000000000000000073657175656e636572a0143325ee59ca89b181d1d89a25bb7b8d3c12081bdf67d7953293c1476f445afea04a7e9caa86c2ad12fb1afb5925b67ad11328bb113ef1f9feeba4fe40361d3523a0f650036ce39d9219d7262560f5a38f18995602887a44e96c04dbf1b9198d8c21bc8f4208704000000000000830654c68464abbf3da093f89bc3c61a48a17c55ad285b2586df8e19fb9ce6790eca03aa30df8b639809a0000000000000981200000000008e3b0b000000000000000a0000000000000000880000000000074d998405f5e100"];
      //seqRaw = await fs.readFileSync('./test/hardhat/1800.txt');
      //seq = await JSON.parse(seqRaw);
//      console.log(seq);
//      return;
      latestHash = null;
      for(i = 0; i < seq.length; i++) {
         rdec = rlp.decode(seq[i]);
         prevHash = await uint2num(rdec[0]);
         blockNum = await uint2num(rdec[8]);
         bytes = await Buffer.from(seq[i].replace('0x',''), 'hex');
         curHash = await sha3.keccak256(bytes);
         console.log(BigInt('0x'+blockNum).toString(), '0x'+prevHash, '0x'+curHash);
         latestHash = '0x'+curHash;
      }
//    function verifyRawHeaderSequence(bytes32 latestHash, bytes[] calldata sequence) public returns (bool) {
         res1 = await lagrangeService.verifyRawHeaderSequence(latestHash,seq,{
  gasLimit: ethers.utils.parseUnits('300000000', 'wei'), // Set gas limit here
         });
         console.log(res1);
    });
*/    
     it('Smoke test L2-L1 settlement interfaces', async function() {
         const lagrangeService = await ethers.getContractAt("LagrangeService", lsaddr, admin)

//	 await lagrangeService.setArbAddr("0x0000000000000000000000000000000000000001");
//	 await lagrangeService.setOptAddr("0x0000000000000000000000000000000000000001");

	 addr = await lagrangeService.getArbAddr();
	 console.log(addr);
	 addr = await lagrangeService.getOptAddr();
	 console.log(addr);
	 
     });
    it('Slashed status', async function() {
        const lc = shared.LagrangeCommittee;
        slashed = await lc.getSlashed("0x6E654b122377EA7f592bf3FD5bcdE9e8c1B1cEb9");
        expect(slashed).to.equal(false);
    });
    it('Evidence submission (no registration)', async function() {
        const lagrangeService = await ethers.getContractAt("LagrangeService", lsaddr, admin)
        evidence = await getSampleEvidence();
        console.log(evidence)
        // Pre-registration
        try {
            await lagrangeService.uploadEvidence(evidence);
            expect(false).to.equal(false);
        } catch(error) {
        }
    });
    it('Optimism Output Verification', async function() {
        const lagrangeService = await ethers.getContractAt("LagrangeService", lsaddr, admin);
        optAddr = await lagrangeService.getOptAddr();
        console.log(optAddr);
        const ov = await ethers.getContractAt("OptimismVerifier", optAddr, admin);
        const l2oo = await ethers.getContractAt("IL2OutputOracle", l2ooAddr, admin);
        //console.log(l2oo);
        for (i = 0; i < 2; i++) {
          try {
          console.log("verifyOutputProof (pass "+(i+1)+")");
          outputProof = [
                  "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "0xd0670aef39b98b172b625ca7dcb5823ba8b5be30e6832cb6a2d337d5b1038250",
                  "0xadb5d075466430af8891c4c88014ffb2e759752dde83a813713c4a5cd1fb3de6",
                  "0x061ec88a69acdc6f70289979cdb84d29f9024a09fabf6a48a11d7625078870b8"
              ];
          expect(i).to.equal(1);
          hash = await ov.getOutputHash(outputProof);
          console.log(hash);
          res = await ov.verifyOutputProof(
              11991348,
              "0xdd0ababc17fd2e1b37941fe55302df7ee03672b1b8acd738d05eac8c75cddd74",
              outputProof
          );
          console.log("result:",res);
          // check against output
          } catch(error) {
              // no output, first pass
              let provider = ethers.provider; // You can also use other providers
              let block = await provider.getBlock('latest');
              
              latest = await l2oo.latestBlockNumber();
              next = await l2oo.nextBlockNumber();
              console.log("l1 block:",block.number);
              console.log("latest:",latest);
              console.log("next:",next);
              
              if(i) {
                  console.log(error);
              }
              expect(i).to.equal(0);

              // propose output
              await l2oo.proposeL2Output(
                "0x9c7c59dcfc75aa57697ae880a52f82f179150a7e24d208f7f7ad804ea99535cb",
                11991388,
                block.hash,
                block.number
              );
              // confirm output exists
              oi = await l2oo.getL2OutputAfter(11991348);
              console.log(oi);
              // proceed to second pass
          }
        }
    });
    /*
    it('Registration', async function() {
        const lagrangeService = await ethers.getContractAt("LagrangeService", lsaddr, admin);
        // Register
        blsKey = await genBLSKey();
        priv = blsKey.serializeToHexStr();
        pub = blsKey.getPublicKey();
        res = await lagrangeService.register(420,pub.serialize(),5);
    });
    */
        /*
        frozenStatus = await lsm.slasher.isFrozen("0x6E654b122377EA7f592bf3FD5bcdE9e8c1B1cEb9");
        try {
            await lagrangeService.freezeOperator("0x6E654b122377EA7f592bf3FD5bcdE9e8c1B1cEb9");
        } catch(error) {
	    freezeException = true;
        }
        */
});
